#!/bin/bash
# Script de correction rapide pour les erreurs

echo "üîß Correction des erreurs du backend ISRA..."

# 1. Installer node-cache si pas d√©j√† install√©
echo "üì¶ Installation des d√©pendances manquantes..."
npm install node-cache

# 2. Supprimer les fichiers probl√©matiques temporairement
echo "üóëÔ∏è Suppression des fichiers avec erreurs..."
rm -f src/middleware/ExportService.ts
rm -f "Dockerfile copy"

# 3. Cr√©er le dossier services s'il n'existe pas
mkdir -p src/services

# 4. Cr√©er les services corrig√©s
echo "‚ú® Cr√©ation des services corrig√©s..."

# CacheService corrig√©
cat > src/services/CacheService.ts << 'EOF'
import NodeCache from 'node-cache';
import { prisma } from '../config/database';

export class CacheService {
  private static cache = new NodeCache({ 
    stdTTL: 300, // 5 minutes
    checkperiod: 60 
  });

  static async getVarieties(): Promise<any[]> {
    const cached = this.cache.get('varieties');
    if (cached) return cached as any[];

    const varieties = await prisma.variety.findMany({
      where: { isActive: true },
      orderBy: { name: 'asc' }
    });

    this.cache.set('varieties', varieties);
    return varieties;
  }

  static invalidateVarieties(): void {
    this.cache.del('varieties');
  }

  static clearAll(): void {
    this.cache.flushAll();
  }
}
EOF

# SimpleExportService sans d√©pendances externes
cat > src/services/SimpleExportService.ts << 'EOF'
export class SimpleExportService {
  static async exportSeedLotsToCSV(lots: any[]): Promise<string> {
    const headers = [
      'ID', 'Vari√©t√©', 'Niveau', 'Quantit√©', 
      'Date de production', 'Statut', 'Multiplicateur', 'Notes'
    ];

    const csvRows = [
      headers.join(','),
      ...lots.map(lot => [
        lot.id,
        lot.variety.name,
        lot.level,
        lot.quantity,
        lot.productionDate,
        lot.status,
        lot.multiplier?.name || 'N/A',
        `"${(lot.notes || '').replace(/"/g, '""')}"`
      ].join(','))
    ];

    return csvRows.join('\n');
  }

  static generateReportHTML(data: any): string {
    return `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Rapport ISRA</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; color: #2c5530; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; }
        th { background-color: #2c5530; color: white; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üåæ RAPPORT ISRA</h1>
        <p>G√©n√©r√© le : ${new Date().toLocaleDateString('fr-FR')}</p>
    </div>
    <!-- Contenu du rapport -->
</body>
</html>`;
  }
}
EOF

# NotificationService corrig√©
cat > src/services/NotificationService.ts << 'EOF'
import { logger } from '../utils/logger';

export class NotificationService {
  static async notifyQualityTestFailed(
    lot: any,
    qualityControl: any,
    recipients: string[]
  ): Promise<void> {
    const message = `‚ö†Ô∏è √âCHEC DU CONTR√îLE QUALIT√â - Lot: ${lot.id}`;
    
    logger.warn('Notification qualit√©:', {
      lotId: lot.id,
      variety: lot.variety.name,
      germinationRate: qualityControl.germinationRate,
      recipients
    });
    
    // TODO: Impl√©menter l'envoi d'emails r√©els
  }

  static async notifyLotExpiring(
    lots: any[],
    recipients: string[]
  ): Promise<void> {
    logger.info('Notification expiration:', {
      count: lots.length,
      recipients
    });
    
    // TODO: Impl√©menter l'envoi d'emails r√©els
  }
}
EOF

# 5. Corriger le Dockerfile
echo "üê≥ Correction du Dockerfile..."
cat > Dockerfile << 'EOF'
FROM node:20-alpine3.18

RUN addgroup -g 1001 -S nodejs
RUN adduser -S isra -u 1001

WORKDIR /app

COPY package*.json ./
COPY prisma ./prisma/

RUN npm ci --only=production && npm cache clean --force
RUN npx prisma generate

COPY --chown=isra:nodejs . .
RUN npm run build

RUN mkdir -p logs && chown -R isra:nodejs logs

USER isra
EXPOSE 3001

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

CMD ["npm", "start"]
EOF

# 6. Ajouter les index Prisma sugg√©r√©s
echo "üóÑÔ∏è Ajout des index dans le sch√©ma Prisma..."
if grep -q "@@index.*variety_level_status" prisma/schema.prisma; then
  echo "Index d√©j√† pr√©sents dans le sch√©ma Prisma"
else
  echo "
  // Index ajout√©s pour les performances
  @@index([varietyId, level, status], map: \"idx_seed_lots_variety_level_status\")
  @@index([productionDate, level], map: \"idx_seed_lots_production_level\")
  @@index([multiplierId, status, productionDate], map: \"idx_seed_lots_multiplier_complete\")" >> prisma/schema.prisma
fi

# 7. Cr√©er un fichier .env.example mis √† jour
cat > .env.example << 'EOF'
# Base de donn√©es
DATABASE_URL="postgresql://isra_user:password@localhost:5432/isra_seeds"

# JWT
JWT_SECRET="your-super-secret-jwt-key-change-in-production-please"
JWT_ACCESS_EXPIRY="15m"
JWT_REFRESH_EXPIRY="7d"

# Serveur
PORT=3001
NODE_ENV="development"
CLIENT_URL="http://localhost:8080"

# S√©curit√©
BCRYPT_SALT_ROUNDS="12"
CORS_ORIGIN="http://localhost:3000"

# Cache Redis (optionnel)
REDIS_URL="redis://localhost:6379"
REDIS_PASSWORD="redis_secure_password_2024"

# PostgreSQL
POSTGRES_PASSWORD="isra_secure_password_2024"
POSTGRES_PORT="5432"

# Monitoring (optionnel)
GRAFANA_PASSWORD="admin123"

# Upload
MAX_FILE_SIZE="10485760"

# QR Code
QR_BASE_URL="https://api.qrserver.com/v1/create-qr-code/"
EOF

echo "‚úÖ Corrections appliqu√©es avec succ√®s !"
echo ""
echo "üìã Prochaines √©tapes :"
echo "1. V√©rifier que les erreurs TypeScript sont corrig√©es"
echo "2. Ex√©cuter 'npm run build' pour tester la compilation"
echo "3. Lancer 'npm run dev' pour d√©marrer le serveur"
echo "4. Tester l'API avec 'curl http://localhost:3001/health'"
echo ""
echo "üîß Commandes utiles :"
echo "npm run db:generate  # Reg√©n√©rer le client Prisma"
echo "npm run db:migrate   # Appliquer les migrations"
echo "npm run db:seed      # Peupler la base de donn√©es"
echo "npm run lint         # V√©rifier le code"
echo ""
echo "üê≥ Pour Docker :"
echo "docker-compose up -d # D√©marrer tous les services"
echo "docker-compose logs api # Voir les logs de l'API"